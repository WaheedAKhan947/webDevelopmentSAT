Sync vs Async

Sync: one by one, dependend on each other

Async: Execute all

// Synchronous code
console.log("Start");
console.log("End");

// Asynchronous code with a Promise
console.log("Start");
setTimeout(() => console.log("Async Operation"), 1000);
console.log("End");

States of a Promise: pending, fulfilled, and rejected.

new Promise() syntax.
resolve and reject.
Using .then() for chaining.
Using .catch() for error handling.
.finally() for cleanup.


Understanding Async/Await

The syntax: async functions and await.
Why async/await simplifies promise chaining.
Error handling with try...catch.

Combining async/await and .catch().
// Promise chaining
fetch('https://jsonplaceholder.typicode.com/posts')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error(error));

// Async/Await
async function fetchData() {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error(error);
  }
}
fetchData();
